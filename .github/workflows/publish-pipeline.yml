# This is a sample workflow to demonstrate a CI pipeline with onboarding of a new release of an offering
# to the IBM Cloud catalog.

name: custom-ci-pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on the publish of a release. Its assumed that the release has an associated tag.
  release:
    types:
      - published
       
  workflow_dispatch: 
jobs:
  # This workflow contains a single job called "onboard-publish-release"
  onboard-publish-release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      CATALOG_NAME: Demo
      OFFERING_NAME: custom-deployable-arch
      VARIATION: customedge
      RESOURCE_GROUP: default
      # Note that IBMCLOUD_API_KEY is a secret env. configured on the project

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access scripts, etc.
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Install and setup IBMCLOUD Cli
        run: |
          ./.github/scripts/installCloudCli.sh

      - name: Upload, validate, scan and publish to cloud catalog
        env: 
          IBMCLOUD_API_KEY: ${{ secrets.IBMCLOUD_API_KEY }}
        run: |
          # login to the IBM Cloud using an api key from the appropriate cloud account
          ibmcloud login --apikey "$IBMCLOUD_API_KEY" --no-region

          echo "--------------------------------------------------------------------"
          echo "onboard version, validate, scan, publish"
          echo "--------------------------------------------------------------------"

          # generate deployment values for validation
          VALIDATION_VALUES="validation-values.json"
          ./.github/scripts/generateValidationValues.sh "$VALIDATION_VALUES"

          # import the version into the catalog and run validation via schematics
          echo "importing to the catalog and validating"
          WORKSPACE_ID=$(./.github/scripts/onboard_validate_publish.sh "$CATALOG_NAME" "$OFFERING_NAME" "$VARIATION" "$RESOURCE_GROUP" "$VALIDATION_VALUES")

          echo "--------------------------------------------------------------------"
          echo "destroy validation resources"
          echo "--------------------------------------------------------------------"
          
          ./.github/scripts/cleanup.sh "$WORKSPACE_ID"
